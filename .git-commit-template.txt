# <类型>(范围): <主题> (最多50个字)

# 内容（可详细补充）


# 类型（必填）：commit 的类别，只允许使用下面几个标识：
#    feat: (新增feature)
#    fix: (bug修复)
#    docs: (文档改动)
#    style: (格式化, 如空格、缩进、分号等, 不改变代码逻辑; 不包括生产代码变动)
#    refactor: (重构代码)
#    perf: (优化相关，如性能优化)
#    test: (添加缺失的测试, 包括单元测试、集成测试, 不包括生产代码变动)
#    chore: (改变构建流程或者增加依赖库、工具等; 不包括生产代码变动)
#    revert: (代码回滚)
# 范围（选填）：commit影响的范围，比如子项目、数据层、控制层
# 主题（必填）：commit 的简短描述，不超过50个字符。
# 内容（选填）：解释为什么要做这些改动，用于详细补充
# --------------------
# 注意
#    主题和内容以一个空行分隔
#    主题限制为最大50个字
#    主题行结束不用标点
#    内容每行72个字
#    内容用于解释为什么和是什么,而不是怎么做
#    内容多行时以'-'分隔
#    提交类型值与提交信息以': '分隔
#    有JIRA可放在主题后
# --------------------
#
# 样例：
#   feat(auth): add auth api
#   docs(swagger): re-generate swagger docs
#
#   以下样例摘自：https://github.com/gin-gonic/gin
#   chore: fix invalid link (#1820)
#   chore(docs): bump to v1.7.2 (#2724)
#
# 工具：详细教程可自行搜索
# 1. 可手动设置commit模板: git config --global commit.template  [模板文件路径]
# 2. 可在golang IDE plugin中搜索，'git commit template', 然后安装
